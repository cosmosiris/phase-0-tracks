Data Structures
1. Why are data structures useful in programming?
    Data structures allow a computer to store and organize information. Programming is all about taking inputs, processing it in someway, and then returning an output. While processing the input, it needs to be stored somwhere and thats what a data structure is for.

Arrays
2. Define "array" and describe the characteristics of an array.
  An array is a type of data structure that is used to hold multiple pieces of information. Each piece of information is called an element. These elements are stored in a sequential order and elements can be accessed by referencing their index. The index is basically the location of the element inside the array. Arrays are indexed starting at zero for the first element. You can also locate an element using negative numbers with negative 1 being the location of the last element inside the array.


3. Give two original examples of data sets that an array might be well-suited for.
  An array is suited for things like lists or tables

Hashes
4. Define "hash" and describe the characteristics of a hash.
  A hash is very similar to an array in that it is a type of data structure that is used to hold multiple pieces of information. But there are some key differences. First, elements inside a hash are not "ordered" thus they cannot be indexed. Second, each element inside of a hash has two components, a key, and a value. They are referred to as key-value pairs. In order to reference a value inside of a hash, you must first refence it's key.

5. Give two original examples of data sets that a hash might be well-suited for.
  Hashes are useful for complex lists, like a dictionary, which is why they are also called dictionaries. Hashes can be used to store large amounts of data that needs to be sorted through quickly. It can be used to store data in a categorical way, for example listing the physical characteristics of an object {color: blue, weight:1500lb, model:toyota corolla, year:1995}

Iteration
6. Why is iteration useful?
  Iteration is when a set of instructions are repeated multiple times until a solution has been found or a certain condition has been met.


7. Give an example of a real-life task that would require iteration if you wrote an algorithm for it.
  Searching for a name in a contact list would require iteration. Alphabetizing a list of names in a contact list would also require iteration. Cross-referencing login information to ensure it is correct would require iteration.


Blocks
8. What is a block?
  A block in ruby is a chunk of code between curly braces or between the "do" and "end" keywords. They are essentially, simplified functions or methods.

9. What is a block parameter, and where does its value come from?
  Block arguments are a set of variables surrounded by pipe characters and separated by commas. Their values come from a variable outside of the block that the block has been assigned to use or manipulate.